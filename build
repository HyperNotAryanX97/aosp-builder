#!/bin/bash
cd /tmp/rom # Depends on where source got synced

# Next 8 lines should be run first to collect ccache and then upload, after doning it 1 or 2 times, our ccache will help to build without these 8 lines.
#make api-stubs-docs || echo no problem, we need ccache
#make system-api-stubs-docs || echo no problem we need ccache
#make test-api-stubs-docs || echo no problem, we need ccache
#make aex -j10 & # dont remove that '&'
#sleep 85m
#kill %1
#ccache -s
#and dont use below codes for first 1 or 2 times, to get ccache uploaded,


# upload function for uploading rom zip file! I don't want unwanted builds in my google drive haha!
up(){
	curl --upload-file $1 https://transfer.sh/$(basename $1); echo
	# 14 days, 10 GB limit
}

# It's recommended to use google drive(rclone) as upload solution for coping with the time limit. Un-comment next 3 lines to upload with rclone in drive. Also change apon and junk according to your config name, uploading folder of drive
#up(){
#	time rclone copy $1 rombb:junk -P # apon is my rclone config name, 
#}

tg(){
	bot_api=1529603673:AAHOdvOMhZJzHENnKyYyKTniWc9zRdyx0TQ # Your tg bot api, dont use my one haha, it's better to encrypt bot api too.
	your_telegram_id=$1 # No need to touch 
	msg=$2 # No need to touch
	curl -s "https://api.telegram.org/bot${bot_api}/sendmessage" --data "text=$msg&chat_id=${your_telegram_id}"
}

id=1424391949 # Your telegram id

# Upload rom zip file if succeed to build! Send notification to tg! And send shell to tg if build fails!

# Let's compile by parts! Coz of ram issue!
make init || echo no problem
make sepolicy || echo no problem
make bootimage || echo no problem

make bacon -j10 \
	&& send_zip=$(up out/target/product/begonia/*zip) && tg $id "Build Succeed!
$send_zip" \
	|| tmate -S /tmp/tmate.sock new-session -d && tmate -S /tmp/tmate.sock wait tmate-ready && send_shell=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}') && tg $id "Build Failed" && tg $id "$send_shell" && ccache -s && sleep 2h
ccache -s # Let's print ccache statistics finally
